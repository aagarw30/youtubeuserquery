shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub2/ex')
shiny::runApp('Desktop/subexp/sub1')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
shiny::runApp('Desktop/subexp/sub2')
sessionInfo()
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
library(shiny)
library(ggplot2)
shiny::runApp('Desktop/subexp/ex2')
g=ggplot(iris, aes(iris[,Sepal.Length],iris[,Sepal.Length]))  + geom_point() + xlab(x)+ylab(y)
g=ggplot(iris, aes(iris[,Sepal.Length],iris[,Sepal.Length]))  + geom_point()
print(g)
names(iris)
g=ggplot(iris, aes(Sepal.length,Sepal.length))  + geom_point()
print(g)
g=ggplot(iris, aes(Sepal.Length,Sepal.Length))  + geom_point()
print(g)
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
?ggplot2
?ggplot
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
iris(Sepal.Length)
data(iris)
iris(Sepal.Length)
iris[Sepal.Length]
names(iris)
iris[,Sepal.Length]
iris[,1]
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
?ggplot
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
environment()
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
iris[,2]
iris[,"Sepal.Length"]
iris[,Sepal.Length]
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
z()
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
shiny::runApp('Desktop/subexp/ex2')
ls()
rm(ls())
rm(ls(all))
rm(ls(All))
rm(ls(c("s", "x")))
rm(ls(c(s,x)))
rm(c(s,x))
rm(c("s", "x"))
?rm
rm(list=ls())
ls()
? factor
example(factor)
factor("gender", levels=c("M", "F"), labels=c("male","female"))
gender
head(mtcars)
str(mycars)
str(mtcars)
names(mtcars)
rownames(mtcars)
colnames(mtcars)
boxplot(mtcars$mpg)
abline(v=mean(mtcars$mpg))
boxplot(mtcars$mpg)
abline(v=mean(mtcars$mpg)
boxplot(mtcars$mpg)
abline(v=mean(mtcars$mpg))
boxplot(mtcars$mpg, col = "Green")
hist(mtcars$mpg, breaks=10, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
rug(mtcars$mpg)
boxplot(mtcars$mpg, col = "Green")
hist(mtcars$mpg, breaks=10, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
rug(mtcars$mpg)
hist(mtcars$mpg, breaks=20, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=10, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=15, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=5, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=10, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=15, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=20, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=30, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=40, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
hist(mtcars$mpg, breaks=10, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
rug(mtcars$mpg)
## Boxplot
boxplot(mtcars$mpg, col = "Green")
abline(h=mean(mtcars$mpg))
abline(h=mean(mtcars$mpg))
hist(mtcars$mpg, breaks=10, col="red", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
rug(mtcars$mpg)
abline(v=summary(mtcars$mpg))
abline(v=mean(mtcars$mpg))
abline(v=mean(mtcars$mpg))
hist(mtcars$mpg, breaks=10, col="yellow", xlab="Miles Per Gallon", main="Histogram of Miles per Gallon")
rug(mtcars$mpg)
abline(v=mean(mtcars$mpg), col = "red", lwd=4)
abline(v=median(mtcars$mpg), lwd=4)
str(mtcars)
barplot(table(mtcars$cyl))
barplot(table(mtcars$cyl), col = "yellow")
barplot(table(mtcars$cyl), col = "yellow")
barplot(table(mtcars$am))
barplot(factor(mtcars$cyl))
boxplot(mpg ~ am, color = c("green", "yellow"))
boxplot(mpg ~ am, data= mtcars, color = c("green", "yellow"))
boxplot(mpg ~ am, data= mtcars, colour = c("green", "yellow"))
boxplot(mpg ~ am, data= mtcars, color = "green"
boxplot(mpg ~ am, data= mtcars, color = "green")
# We can also use logical operators to find out which car(s) get greater
boxplot(mpg ~ am, data= mtcars, color = "green")
boxplot(mpg ~ am, data=mtcars, col = c("blue", "yellow"))
boxplot(mpg ~ am, data=mtcars, col = c("green", "yellow"))
boxplot(mpg ~ am, data=mtcars, col = c("green", "yellow"), main="mpg by transmission")
boxplot(mpg ~ am, data=mtcars, col = c("green", "yellow"), main="mpg by transmission", xlab="Transmission type", ylab="Miles per gallon")
str(mtcars)
boxplot(mpg ~ cyl, data=mtcars, col = c("green", "yellow", "red"), main="mpg by transmission", xlab="Transmission type", ylab="Miles per gallon")
par(mfcol(1,1))
par(mfrow(1,2))
par(mfrow=(1,2))
par(mfrow=c(1,2))
boxplot(mpg ~ am, data=mtcars, col = c("green", "yellow"), main="mpg by transmission", xlab="Transmission type", ylab="Miles per gallon")
boxplot(mpg ~ cyl, data=mtcars, col = c("green", "yellow", "red"), main="mpg by transmission", xlab="Transmission type", ylab="Miles per gallon")
str(mtcars)
plot(x = mtcars$mpg, y = mtcars$wt)
par(mfrow=c(1,1))
plot(x = mtcars$mpg, y = mtcars$wt)
plot(x = mtcars$wt, y = mtcars$mpg)
str(mtcars)
plot(x = mtcars$hp, y = mtcars$mpg)
with(mtcars, plot(p, mpg))
with(mtcars, plot(hp, mpg))
plot(x = mtcars$wt, y = mtcars$mpg, col=mtcars$am)
plot(x = mtcars$wt, y = mtcars$mpg, col=mtcars$am)
with(mtcars, plot(hp, mpg, col=am))
with(mtcars, plot(hp, mpg))
library(ggplot2)
qplot(x=wt, y=mpg ,data=mtcars)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~factor(Month), airquality)
boxplot(Ozone~Month, airquality)
x= rnorm(100)
hist(x)
y = rnorm(100)
plot(x,y)
plot(x,y, pch = 18)
plot(x,y, pch = 9)
x= rnorm(100)
hist(x) # histogram
title("Example of Histogram")
data(diamonds)
str(diamonds)
library(ggplot2)
str(diamonds)
dfl
language <- "en"
yymm <- "201501"
article <- "democracy"
URL <- "http://stats.grok.se/json"
URLfinal <- paste(URL,language, yymm, article, sep="/")
URLfinal
library(jsonlite)
library(curl)
jsonData <- fromJSON(URLfinal) # reading JSON format and assigning to JSON object
names(jsonData) # Displays the variables present in the JSON object
jsonData$daily_views # view the variables using the $ sign. This ouptuts a list
unls <- unlist(jsonData$daily_views)
dfl <- as.data.frame(unls)
dfl
names(dfl)
rownames(dfl)
dfl$date <- rownames(dfl)
dfl
rownames(dfl) <- NULL
dfl
getUrls <- function(y1,y2,term){
root="http://stats.grok.se/json/en/"
urls <- NULL
for(year in y1:y2){
for(month in 1:9){
urls <- c(urls,(paste(root,year,0,month,"/",term,sep="")))
}
for (month in 10:12){
urls <- c(urls,(paste(root,year,month,"/",term,sep="")))
}
}
return(urls)
}
getUrls(2014, 2015, "democracy")
install.packages("XML")
library(XML)
library(curl)
url <- "http://http://quantifyingmemory.blogspot.co.uk"
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
library(XML)
library(curl)
install.packages("RCurl")
library(Rcurl)
url <- "http://http://quantifyingmemory.blogspot.co.uk"
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
library(Rcurl)
install.packages("RCurl")
library(Rcurl)
library(RCurl)
url <- "http://http://quantifyingmemory.blogspot.co.uk"
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
substring (SOURCE,1,200)
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
url <- "http://quantifyingmemory.blogspot.co.uk"
SOURCE <-  getURL(url,encoding="UTF-8") #Download the page
#this is a very very long line. Let's not print it. Instead:
substring(SOURCE,1,200)
PARSED <- htmlParse(SOURCE)
PARSED
xpathSApply(PARSED, "//h1",xmlValue)
id <- UCbck9jjLpwj7U6HHNps_9Gw   ## Input Video ID here
id <- "UCbck9jjLpwj7U6HHNps_9Gw"   ## Input Video ID here
URL_base <- "https://gdata.youtube.com/feeds/api/videos/"
URL_final <- paste(URL_base, id, "?v=2&alt=json")
URL_final
URL_base <- "https://gdata.youtube.com/feeds/api/videos/"
URL_final <- paste(URL_base,id,"?v=2&alt=json", sep="")
URL_final
id <- "UCbck9jjLpwj7U6HHNps_9Gw"   ## Input Video ID here
URL_base <- "https://gdata.youtube.com/feeds/api/videos/"
URL_final <- paste(URL_base,id,"?v=2&alt=json", sep="")
URL_final
## Fetch the JSON data
jdata <- fromJSON(URL_final, warning=F)
library(jsonlite)
jdata <- fromJSON(URL_final, warning=F)
jdata <- fromJSON(URL_final)
id <- "Ya2elsR5s5s"   ## Input Video ID here
URL_base <- "https://gdata.youtube.com/feeds/api/videos/"
URL_final <- paste(URL_base,id,"?v=2&alt=json", sep="")
URL_final
## Load the JSON package
library(jsonlite)
## Fetch the JSON data
jdata <- fromJSON(URL_final)
names(jdata)
jdata$entry
jdata$entry$rating$numLikes
jdata$entry$xmlns
jdata$entry$xmlns$gd
jdata$entry$`yt$rating`$numDislikes
jdata$entry
jdata$entry$title
jdata$entry$author
jdata$entry$author[[1]]
title <- jdata$entry$title
author <- jdata$entry$author[[1]]
dislikes <- jdata$entry$`yt$rating`$numDislikes
likes <- jdata$entry$`yt$rating`$numLikes
data.frame(title,author,dislikes,likes)
data.frame(title=title,author=author,dislikes=dislikes,likes=likes)
data.frame(title, author, dislikes, likes)
sessionInfo()
version
language <- "en"
yymm <- "201501"
article <- "democracy"
URL <- "http://stats.grok.se/json"
URLfinal <- paste(URL,language, yymm, article, sep="/")
URLfinal
library(jsonlite)
library(curl)
jsonData <- fromJSON(URLfinal) # reading JSON format and assigning to JSON object
names(jsonData) # Displays the variables present in the JSON object
URLfinal
names(jsonData) # Displays the variables present in the JSON object
jsonData$daily_views # view the variables using the $ sign. This ouptuts a list
unls
unls <- unlist(jsonData$daily_views)
unls
dfl <- as.data.frame(unls)
dfl
URLfinal
names(jsonData) # Displays the variables present in the JSON object
jsonData$daily_views # view the variables using the $ sign. This ouptuts a list
unls <- unlist(jsonData$daily_views)
unls
dfl <- as.data.frame(unls)
dfl
which.max(dfl$unls)
dfl[25,]
rownames(dfl)
dfl$date <- rownames(dfl)
dfl
rownames(dfl) <- NULL
dfl
dfl
str(dfl)
URLfinal
yyyymm <- "201501" # input from user
year <- "2015"
month <- "1" # input from user (1 thru 12)
yymm <- paste(year, month, sep="")
paste(year, month, sep="")
createURL <- function(article, year, month, language){
#   language <- language # input from user
#   year <- "2015"
#   month <- "01" # input from user (01 thru 12)
#   article <- "democracy"
if(month>0 & month<10)
yymm <- paste(year, "0", month, sep="")
else
yymm <- paste(year, month, sep="")
URL <- "http://stats.grok.se/json"
URLfinal <- paste(URL,language, yymm, article, sep="/")
return(URLfinal)
}
createURL("Democracy", 2015, 3, en)
createURL("Democracy", 2015, 3, "en")
createURL("Democracy", 2015, 1, "en")
createURL("Democracy", 2015, 9, "en")
createURL("Democracy", 2015, 10, "en")
createURL("Democracy", 2015, 11, "en")
URL_base <- "https://gdata.youtube.com/feeds/api/videos/"
URL_final <- paste(URL_base,id,"?v=2&alt=json", sep="")
URL_final
id <- "Ya2elsR5s5s"   ## Input Video ID here
URL_base <- "https://gdata.youtube.com/feeds/api/videos/"
URL_final <- paste(URL_base,id,"?v=2&alt=json", sep="")
URL_final
library(jsonlite)
library(curl)
urlytube <- https://gdata.youtube.com/feeds/api/videos?q=big+data&orderby=rating&start-index=11&max-results=10&v=2&alt=json
urlytube <- "https://gdata.youtube.com/feeds/api/videos?q=big+data&orderby=rating&start-index=11&max-results=10&v=2&alt=json"
dat <- fromJSON(urlytube)
names(dat)
dat$feed
names(dat)
dat$version
dat$encoding
dat$feed
urlytube <- "https://gdata.youtube.com/feeds/api/videos?q=big+data&max-results=10&v=2&alt=json"
dat <- fromJSON(urlytube)
names(dat)
dat$feed
dat$feed$author
shiny::runApp('Desktop/Rrelated/exp/formvalid')
shiny::runApp('Desktop/Rrelated/exp/formvalid')
shiny::runApp('Desktop/Rrelated/exp/formvalid')
library(shiny)
))
library(shiny)
runApp(shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
numericInput("test", "Test", 5),
actionButton("submit", "Choose")
),
server = function(input, output, session) {
observeEvent(input$submit, {
shinyjs::disable("test")
})
}
))
install.packages("shinyjs")
library(shinyjs)
runApp(shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
numericInput("test", "Test", 5),
actionButton("submit", "Choose")
),
server = function(input, output, session) {
observeEvent(input$submit, {
shinyjs::disable("test")
})
}
))
shiny::runApp('Documents/mydeskbkp/ex')
shiny::runApp('Desktop/ggshiny')
shiny::runApp('Desktop/tt')
shiny::runApp('Desktop/tt')
shiny::runApp('Desktop/tt')
shiny::runApp('Desktop/tt')
shiny::runApp('Desktop/tt')
shiny::runApp('Desktop/tt')
shiny::runApp('Desktop/tt')
setwd("~/Desktop/youtubeuserquery/mousehover")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
